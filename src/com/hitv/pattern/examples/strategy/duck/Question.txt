扩展维护的需求：
       需要新增加一种会飞的鸭子子类。
 
 *************************************************************************  
    方法1：Duck增加fly()方法
    
    显然不是所有的Duck子类都需要实现fly()方法，直接将fly()方法加给Duck超类
    会对既有根本不需要fly()方法的Duck子类产生干扰，使得他们具备了根本不应该具备的行为。
   加空实现的fly()方法则会降低代码重用度，造成很多的重复代码。
    
   方法2：增加独立的Flyable接口，包含fly()接口方法
   
   该方法会使得fly()复用性很低，如果有很多Duck子类都需要fly方法，那么将会在Duck子类间产生诸多重复代码
   
   方法3：  增加独立的FlyBehavior接口，以及各种已知的FlyBehavior实现类
   
    面向接口编程，将变化的行为抽象为接口(或抽象类),由具体的Duck子类来制定需要完成该行为的具体子类，
    保持了扩展性和重用性而尽量少的对其他子类产生影响，组合替代继承。具体的行为类可以动态设定。
    
    参考flyingduck包内代码（策略模式）
    